// Docs for ExcelJS, f칬r att se inbyggda metoder etc: https://github.com/exceljs/exceljs
// Utility function som 칬vers칛tter ExcelJS-informationen till data som EditableTable kan anv칛nda

export function workbookToRows(workbook) {
  // 游댲 NEW: error handling f칬r workbook
  if (!workbook) {
    throw new Error("No workbook provided to workbookToRows"); // 游댲 NEW
  }

  // 游댲 NEW: error handling om inga worksheets finns
  if (!workbook.worksheets || workbook.worksheets.length === 0) {
    throw new Error("Workbook has no worksheets"); // 游댲 NEW
  }

  try { // 游댲 NEW: wrappar i try/catch
    const worksheet = workbook.worksheets[0]; // Tar f칬rsta bladet i Excelfilen. Vill vi kunna v칛lja eller hantera flera, beh칬ver vi utveckla logiken.
    const rows = [];
    const maxCols = worksheet.columnCount || 0; // Hur m친nga kolumner worksheeten har, inbyggd property fr친n ExcelJS

    worksheet.eachRow((row) => {
      const obj = {}; // Objekt f칬r varje rad, som kommer att inneh친lla key f칬r kolumnen och value f칬r varje cells faktiska v칛rde, blir typ s친h칛r: {Column_1: "Cellv칛rde", column_2: "N칛sta cellv칛rde"  .. osv}

      for (let col = 1; col <= maxCols; col++) {
        const cellVal = row.getCell(col).text ?? ""; 
        // getCell(<kolumn>) 칛r ocks친 en inbyggd ExcelJS-metod, om det ligger n친got annat 칛n en str칛ng i cellen 
        // s친 kommer .text att returnera den rimligaste tolkningen i text, om jag har f칬rst친tt det r칛tt. 
        // Nullish coalescing operator (= ??) returnerar det v칛nstra v칛rdet om inte det 칛r null eller undefined, 
        // annars skickar den tillbaka det h칬gra v칛rdet (i det h칛r fallet en tom str칛ng). 

        obj[`Column_${col}`] = cellVal;
      }

      rows.push(obj);
    });

    return rows;
  } catch (err) { // 游댲 NEW
    console.error("Error while parsing workbook:", err); // 游댲 NEW
    throw new Error("Failed to parse workbook rows"); // 游댲 NEW
  }
}
